<div id="my-courses-widget-{{ widgetInstance.getId() }}">
    <div id="courses-list-{{ widgetInstance.getId() }}">
        {% if mode == 0 %}
            {{
                render(controller(
                    'ClarolineCursusBundle:Cursus:myCoursesListForWidget',
                    {'widgetInstance': widgetInstance.getId()}
                ))
            }}
        {% elseif mode == 1 %}
            {{
                render(controller(
                    'ClarolineCursusBundle:Cursus:myCoursesListForWidgetCalendar',
                    {'widgetInstance': widgetInstance.getId()}
                ))
            }}
        {% endif %}
    </div>
</div>

{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('bundles/frontend/fullcalendar/dist/fullcalendar.min.css') }}"/>
    <link rel="stylesheet" href="{{ asset('bundles/frontend/fullcalendar/dist/fullcalendar.print.css') }}" media="print"/>
{% endblock %}

{% block javascripts %}
    <script src="{{ asset('bundles/frontend/moment/min/moment-with-locales.min.js') }}"></script>
    <script src="{{ asset('bundles/frontend/fullcalendar/dist/fullcalendar.min.js') }}"></script>
    <script src="{{ asset('bundles/bazingajstranslation/js/translator.min.js') }}"></script>
    <script src="{{ url('bazinga_jstranslation_js', { 'domain': 'platfrom' }) }}"></script>
    <script src="{{ url('bazinga_jstranslation_js', { 'domain': 'agenda' }) }}"></script>
    <script src="{{ url('bazinga_jstranslation_js', { 'domain': 'cursus' }) }}"></script>
    <script>
      (function () {
        const widgetInstanceId = {{ widgetInstance.getId() }}
        let mode = ({{ mode }} === 1) ? 'calendar' : 'list'
        let currentSearch = ''
        let currentMax = 20
        let currentOrderedBy = 'title'
        let currentOrder = 'ASC'
        const sessionsIdx = 'sessions_' + widgetInstanceId
        const editableSessionsIdx = 'editable-sessions_' + widgetInstanceId
        const widgetElement = $(`#my-courses-widget-${widgetInstanceId}`)
        const listElement = $(`#courses-list-${widgetInstanceId}`)
        let sessions = []
        let events = []
        let editableSessions = []

        function refreshCoursesList () {
          const route = mode === 'list' ?
            Routing.generate(
              'claro_cursus_my_courses_list_for_widget',
              {
                'widgetInstance': widgetInstanceId,
                'search': currentSearch,
                'max': currentMax,
                'orderedBy': currentOrderedBy,
                'order': currentOrder
              }
            ) :
            Routing.generate(
              'claro_cursus_my_courses_list_for_widget_calendar',
              {'widgetInstance': widgetInstanceId, 'search': currentSearch}
            )

          $.ajax({
            url: route,
            type: 'GET',
            success: function (datas) {
              listElement.html(datas)

              if (mode === 'calendar') {
                initializeCalendar()
              }
            }
          })
        }

        widgetElement.on('click', 'a', function (event) {
          if (!$(this).hasClass('standard-link')) {
            event.preventDefault()
            const element = event.currentTarget
            const route = $(element).attr('href')

            $.ajax({
              url: route,
              type: 'GET',
              success: function (datas) {
                listElement.html(datas)
              }
            })
          }
        })

        widgetElement.on('click', '#search-course-btn', function () {
          currentSearch = $('#search-course-input').val()
          refreshCoursesList()
        })

        widgetElement.on('keypress', '#search-course-input', function (e) {
          if (e.keyCode === 13) {
            e.preventDefault()
            currentSearch = $(this).val()
            refreshCoursesList()
          }
        })

        widgetElement.on('click', '#calendar-view-button', function () {
          const route = Routing.generate(
            'claro_cursus_my_courses_list_for_widget_calendar',
            {'widgetInstance': widgetInstanceId, 'search': currentSearch}
          )

          $.ajax({
            url: route,
            type: 'GET',
            success: function (datas) {
              listElement.html(datas)
              mode = 'calendar'
              initializeCalendar()
            }
          })
        })

        widgetElement.on('click', '#list-view-button', function () {
          const route = Routing.generate(
            'claro_cursus_my_courses_list_for_widget',
            {'widgetInstance': widgetInstanceId, 'search': currentSearch,'max': currentMax, 'orderedBy': currentOrderedBy, 'order': currentOrder}
          )

          $.ajax({
            url: route,
            type: 'GET',
            success: function (datas) {
              listElement.html(datas)
              mode = 'list'
            }
          })
        })

        function registerComment (eventId, comment) {
          const index = events.findIndex(e => (e['id'] === eventId) && (e['type'] === 'session_event'))

          if (index > -1) {
            events[index]['comments'].push(comment)
          }
        }

        function t (key) {
          if (typeof key === 'object') {
            let transWords = []

            for (let i = 0; i < key.length; i++) {
              transWords.push(Translator.trans(key[i], {}, 'agenda'))
            }
            return transWords
          }
          return Translator.trans(key, {}, 'agenda')
        }

        function initializeEvents () {
          events = []
          sessions.forEach(s => {
            let sessionStartEvent = {}
            let sessionEndEvent = {}

            for (let key in s) {
              sessionStartEvent[key] = s[key]
              sessionEndEvent[key] = s[key]
            }
            sessionStartEvent['title'] = s['name']
            sessionStartEvent['start']= s['startDate']
            sessionStartEvent['end']= s['startDate']
            sessionStartEvent['editable']= false
            sessionStartEvent['allDay']= true
            sessionStartEvent['className']= 'pointer-hand'
            sessionStartEvent['color'] = '#449D44'
            sessionStartEvent['type'] = 'session_start'

            sessionEndEvent['title'] = s['name']
            sessionEndEvent['start']= s['endDate']
            sessionEndEvent['end']= s['endDate']
            sessionEndEvent['editable']= false
            sessionEndEvent['allDay']= true
            sessionEndEvent['className']= 'pointer-hand'
            sessionEndEvent['color'] = '#D9534F'
            sessionEndEvent['type'] = 'session_end'
            events.push(sessionStartEvent)
            events.push(sessionEndEvent)
            s['events'].forEach(e => {
                e['title'] = e['name']
                e['start']= e['startDate']
                e['end']= e['endDate']
                e['editable']= false
                e['allDay']= false
                e['className']= 'pointer-hand'
                e['color'] = '#337AB7'
                e['type'] = 'session_event'
                e['sessionId'] = s['id']
                e['sessionName'] = s['name']
                e['sessionStartDate'] = s['startDate']
                e['sessionEndDate'] = s['endDate']
                e['sessionDescription'] = s['description']
                e['courseId'] = s['course']['id']
                e['courseTitle'] = s['course']['title']
                e['courseCode'] = s['course']['code']
                e['courseDescription'] = s['course']['description']
                events.push(e)
            })
          })
        }

        function initializeCalendar () {
          sessions = (typeof window[sessionsIdx] === 'undefined') ? [] : JSON.parse(window[sessionsIdx])
          editableSessions = (typeof window[editableSessionsIdx] === 'undefined') ? [] : window[editableSessionsIdx]
          initializeEvents()
          $('#courses-widget-calendar-' + widgetInstanceId).fullCalendar({
            header: {
              left: 'prev,next, today',
              center: 'title',
              right: 'month,agendaWeek,agendaDay'
            },
            columnFormat: {
              month: 'ddd',
              week: 'ddd D/M',
              day: 'dddd D/M'
            },
            buttonText: {
              prev: t('prev'),
              next: t('next'),
              prevYear: t('prevYear'),
              nextYear: t('nextYear'),
              today: t('today'),
              month: t('month_'),
              week: t('week'),
              day: t('day_')
            },
            firstDay: 1,
            monthNames: t(['month.january', 'month.february', 'month.march', 'month.april', 'month.may', 'month.june', 'month.july', 'month.august', 'month.september', 'month.october', 'month.november', 'month.december']),
            monthNamesShort: t(['month.jan', 'month.feb', 'month.mar', 'month.apr', 'month.may', 'month.ju', 'month.jul', 'month.aug', 'month.sept',  'month.oct', 'month.nov', 'month.dec']),
            dayNames: t(['day.sunday', 'day.monday', 'day.tuesday', 'day.wednesday', 'day.thursday', 'day.friday', 'day.saturday']),
            dayNamesShort: t(['day.sun', 'day.mon', 'day.tue', 'day.wed', 'day.thu', 'day.fri', 'day.sat']),
            //This is the url which will get the events from ajax the 1st time the calendar is launched
            events: events,
            axisFormat: 'HH:mm',
            timeFormat: 'H:mm',
            agenda: 'h:mm{ - h:mm}',
            allDayText: t('isAllDay'),
            lazyFetching : false,
            fixedWeekCount: false,
            eventLimit: false,
            timezone: 'local',
            eventClick:  onEventClick
          })
        }

        function onEventClick (event, jsEvent) {
          jsEvent.stopPropagation()
          jsEvent.preventDefault()
          let title = ''
          let body = ''

          switch (event['type']) {
            case 'session_start':
              title = Translator.trans('session_start_title', {sessionName: event['title']}, 'cursus')
              break
            case 'session_end':
              title = Translator.trans('session_end_title', {sessionName: event['title']}, 'cursus')
              break
            case 'session_event':
              title = Translator.trans('session_event_title', {eventName: event['title']}, 'cursus')
              break
          }

          switch (event['type']) {
            case 'session_start':
            case 'session_end':
              body = `
                <div>
                    <b>${Translator.trans('course', {}, 'cursus')} :</b>
                    ${event['course']['title']} <small>[${event['course']['code']}]</small>
                </div>
                <hr>
                <div>
                    <b>${Translator.trans('duration', {}, 'platform')} :</b>
                    ${event['startDate']} <i class="fa fa-long-arrow-right"></i> ${event['endDate']}
                </div>
              `
              break
            case 'session_event':
              let commentsElement = `
                <b>${Translator.trans('comments', {}, 'platform')}</b>
                <br>
                <ul id="event-comments-list">
              `
              event['comments'].forEach(e => {
                commentsElement += `<li>${e['content']}</li>`
              })
              commentsElement += '</ul>'

              let newCommentElement = `
                <b>${Translator.trans('add_comment', {}, 'cursus')}</b>
                <br>
                <textarea id="new-comment-input" class="form-control" rows="5"></textarea>
                <br>
                <button id="new-comment-btn" data-event-id="${event['id']}" class="btn btn-primary btn-sm">
                    ${Translator.trans('add', {}, 'platform')}
                </button>
              `

              body = `
                <button class="btn btn-default btn-sm" data-toggle="collapse" href="#collapse-course-infos">
                    ${Translator.trans('course', {}, 'cursus')}
                </button>
                <div id="collapse-course-infos" class="collapse">
                    <br>
                    <br>
                    <b>${Translator.trans('title', {}, 'platform')} :</b>
                    ${event['courseTitle']}
                    <br>
                    <b>${Translator.trans('code', {}, 'platform')} :</b>
                    ${event['courseCode']}
                    <br>
                    ${event['courseDescription'] ? '<b>' + Translator.trans('description', {}, 'platform') + ' :</b>' : ''}
                    ${event['courseDescription'] ? event['courseDescription'] : ''}
                </div>
                <hr>
                <button class="btn btn-default btn-sm" data-toggle="collapse" href="#collapse-session-infos">
                    ${Translator.trans('session', {}, 'cursus')}
                </button>
                <div id="collapse-session-infos" class="collapse">
                    <br>
                    <br>
                    <b>${Translator.trans('name', {}, 'platform')} :</b>
                    ${event['sessionName']}
                    <br>
                    <b>${Translator.trans('duration', {}, 'platform')} :</b>
                    ${event['sessionStartDate']} <i class="fa fa-long-arrow-right"></i> ${event['sessionEndDate']}
                    <br>
                    ${event['sessionDescription'] ? '<b>' + Translator.trans('description', {}, 'platform') + ' :</b>' : ''}
                    ${event['sessionDescription'] ? event['sessionDescription'] : ''}
                </div>
                <hr>
                <div>
                    <b>${Translator.trans('duration', {}, 'platform')} :</b>
                    ${event['startDate']} <i class="fa fa-long-arrow-right"></i> ${event['endDate']}
                    <br>
                    ${event['location'] ? '<b>' + Translator.trans('location', {}, 'platform') + ' :</b>' : ''}
                    ${event['location'] ? event['location'] : ''}
                    <br>
                    ${event['description'] ? '<b>' + Translator.trans('description', {}, 'platform') + ' :</b>' : ''}
                    ${event['description'] ? event['description'] : ''}
                    <br>
                    ${event['comments'].length > 0 || editableSessions[event['sessionId']] ? commentsElement : ''}
                    <br>
                    ${editableSessions[event['sessionId']] ? newCommentElement : ''}
                </div>
              `
              break
          }
          window.Claroline.Modal.simpleContainer(title, body)
        }

        $('body').on('click', '#new-comment-btn', function () {
          const comment = $('#new-comment-input').val()
          const eventId = parseInt($(this).data('event-id'))
          const route = Routing.generate('api_post_session_event_comment', {sessionEvent: eventId})

          $.ajax({
            url: route,
            type: 'POST',
            data: {comment: comment},
            success: function (datas) {
              $('#new-comment-input').val('')
              $('#event-comments-list').append(`<li>${comment}</li>`)
              registerComment(eventId, JSON.parse(datas))
            }
          })
        })

        initializeCalendar()
      })()
    </script>
{% endblock %}