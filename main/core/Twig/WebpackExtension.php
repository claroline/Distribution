<?php

/*
 * This file is part of the Claroline Connect package.
 *
 * (c) Claroline Consortium <consortium@claroline.net>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Claroline\CoreBundle\Twig;

use JMS\DiExtraBundle\Annotation as DI;
use Symfony\Bridge\Twig\Extension\AssetExtension;

/**
 * @DI\Service("claroline.extension.webpack")
 * @DI\Tag("twig.extension")
 */
class WebpackExtension extends \Twig_Extension
{
    private $assetExtension;
    private $environment;
    private $rootDir;
    private $assetCache;

    /**
     * WebpackExtension constructor.
     *
     * @DI\InjectParams({
     *     "extension"      = @DI\Inject("twig.extension.assets"),
     *     "environment"    = @DI\Inject("%kernel.environment%"),
     *     "rootDir"        = @DI\Inject("%kernel.root_dir%")
     * })
     *
     * @param AssetExtension $extension
     * @param string         $environment
     * @param string         $rootDir
     */
    public function __construct(AssetExtension $extension, $environment, $rootDir)
    {
        $this->assetExtension = $extension;
        $this->environment = $environment;
        $this->rootDir = $rootDir;
    }

    public function getFunctions()
    {
        return [
            'hotAsset' => new \Twig_SimpleFunction('hotAsset', [$this, 'hotAsset']),
        ];
    }

    public function getName()
    {
        return 'webpack_extension';
    }

    /**
     * Returns the URL of an asset managed by webpack. The final URL will depend
     * on the environment and the version hash generated by webpack.
     *
     * @param string $path
     * @param bool   $hot
     *
     * @return string
     *
     * @throws \Exception
     */
    public function hotAsset($path, $hot = true)
    {
        $assets = $this->getWebpackAssets();
        $assetName = pathinfo($path, PATHINFO_FILENAME);

        if (!isset($assets[$assetName])) {
            $assetNames = implode("\n", array_keys($assets));

            throw new \Exception(
                "Cannot find asset '{$assetName}' in webpack stats. Found:\n{$assetNames})"
            );
        }

        if ('dev' === $this->environment && $hot) {
            // for dev serve fill from webpack-dev-server
            return 'http://localhost:8080/dist/'.$assets[$assetName]['js'];
        }

        // otherwise serve static generated files
        return $this->assetExtension->getAssetUrl(
            'dist/'.$assets[$assetName]['js']
        );
    }

    private function getWebpackAssets()
    {
        if (!$this->assetCache) {
            $assetFile = 'prod'; // for prod and test envs
            if ('dev' === $this->environment) {
                $assetFile = 'dev';
            }

            $assetFile = "{$this->rootDir}/../webpack-{$assetFile}.json";

            if (!file_exists($assetFile)) {
                throw new \Exception(sprintf(
                    'Cannot find webpack generated assets file(s). Make sure you '
                    .'have ran webpack with assets-webpack-plugin enabled'
                ));
            }

            $this->assetCache = json_decode(file_get_contents($assetFile), true);
        }

        return $this->assetCache;
    }
}
