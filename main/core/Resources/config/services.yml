# This file contains only services that cannot be defined using annotations.

services:
    _defaults:
        autowire: true #change to true
        autoconfigure: true #change to true
        public: false #default should be false now


    #         tags: [doctrine.repository_service]

        # Register all classes in these directories as services

    _instanceof:
        Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository:
            autowire: false
            tags: [doctrine.repository_service]

    Claroline\CoreBundle\Repository\Service\AdministrationToolRepository:
        arguments:
          - '@Symfony\Bridge\Doctrine\RegistryInterface'
          - '@claroline.manager.plugin_manager'

    Claroline\CoreBundle\Repository\Service\OrderedToolRepository:
        arguments:
          - '@Symfony\Bridge\Doctrine\RegistryInterface'
          - '@claroline.manager.plugin_manager'

    Claroline\CoreBundle\Repository\Service\ResourceActionRepository:
        arguments:
          - '@Symfony\Bridge\Doctrine\RegistryInterface'
          - '@claroline.manager.plugin_manager'

    Claroline\CoreBundle\Repository\Service\ResourceTypeRepository:
        arguments:
          - '@Symfony\Bridge\Doctrine\RegistryInterface'
          - '@claroline.manager.plugin_manager'

    Claroline\CoreBundle\Repository\Service\ToolRepository:
        arguments:
          - '@Symfony\Bridge\Doctrine\RegistryInterface'
          - '@claroline.manager.plugin_manager'

    Claroline\CoreBundle\Repository\Service\UserRepository:
        arguments:
          - '@Symfony\Bridge\Doctrine\RegistryInterface'
          - '@claroline.config.platform_config_handler'

    Claroline\CoreBundle\Repository\Service\LogRepository:
        arguments:
          - '@Symfony\Bridge\Doctrine\RegistryInterface'
          - '@claroline.api.finder.log'

    # array injection with annotations is not supported
    claroline.plugin.validator:
        class: Claroline\CoreBundle\Library\Installation\Plugin\Validator
        arguments:
            - routing: "@claroline.plugin.routing_checker"
              config: "@claroline.plugin.config_checker"

    # vendor classes used as service arguments
    claroline.symfony_yaml:
        class: Symfony\Component\Yaml\Parser
        public: false

    # pseudo-services used for dynamic parameter injection
    # (see Claroline\CoreBundle\DependencyInjection\Compiler\DynamicConfigPass
    claroline.session.storage_options:
        class: stdClass
        factory: ["@claroline.session.storage_options_factory", getOptions]

    #notification listeners
    claroline.listener.core.notification_listener:
        class: Claroline\CoreBundle\Listener\Notification\NotificationListener
        calls:
            - [setContainer, ["@service_container"]]
        tags:
            - { name: kernel.event_listener, event: create_notification_item_workspace-role-change_right, method: onCreateNotificationItem }
            - { name: kernel.event_listener, event: create_notification_item_workspace-role-subscribe_user, method: onCreateNotificationItem }
            - { name: kernel.event_listener, event: create_notification_item_workspace-role-subscribe_group, method: onCreateNotificationItem }
            - { name: kernel.event_listener, event: create_notification_item_role-subscribe_user, method: onCreateNotificationItem }
            - { name: kernel.event_listener, event: create_notification_item_role-subscribe_group, method: onCreateNotificationItem }
            - { name: kernel.event_listener, event: create_notification_item_resource-create, method: onCreateNotificationItem }
            - { name: kernel.event_listener, event: create_notification_item_resource-publish, method: onCreateNotificationItem }
            - { name: kernel.event_listener, event: create_notification_item_role-subscribe-queue, method: onCreateNotificationItem }
            - { name: kernel.event_listener, event: create_notification_item_resource-text-update, method: onCreateNotificationItem }
