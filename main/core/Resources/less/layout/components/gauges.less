// todo : merge with path progression gauge
// todo : merge with exo gauge

@circle-width:       0.10em;
@circle-width-hover: 0.06em;
@primary-color:      @brand-secondary;
@secondary-color:    lighten(@brand-secondary, 50%);
@bg-color:           @body-bg;

.gauge {
    .gauge-text {
        fill: @text-color;
    }

    // generates variants
    &.gauge-default {
        .gauge-variant(@gray);
    }
    &.gauge-primary {
        .gauge-variant(@brand-primary);
    }
    &.gauge-success {
        .gauge-variant(@brand-success);
    }
    &.gauge-warning {
        .gauge-variant(@brand-warning);
    }
    &.gauge-danger {
        .gauge-variant(@brand-danger);
    }
    &.gauge-info {
        .gauge-variant(@brand-info);
    }
    &.gauge-user {
        .gauge-variant(@brand-secondary);
    }
}

.liquid-gauge {
    margin: 0 15px 10px; // todo : temp

    .gauge-text {
        font-weight: 900;
    }

    // generates variants
    &.gauge-default {
        .liquid-gauge-variant(@gray);
    }
    &.gauge-primary {
        .liquid-gauge-variant(@brand-primary);
    }
    &.gauge-success {
        .liquid-gauge-variant(@brand-success);
    }
    &.gauge-warning {
        .liquid-gauge-variant(@brand-warning);
    }
    &.gauge-danger {
        .liquid-gauge-variant(@brand-danger);
    }
    &.gauge-info {
        .liquid-gauge-variant(@brand-info);
    }
    &.gauge-user {
        .liquid-gauge-variant(@brand-secondary);
    }
}

// mixin
.gauge-variant(@color) {
    .gauge-border-filled {
        fill: @color;
    }

    .gauge-border-empty  {
        fill: transparent;
    }
}

.liquid-gauge-variant(@color, @liquid-opacity: .3) {
    .gauge-text {
        fill: @color;
    }

    .gauge-liquid {
        fill: @color;
        fill-opacity: @liquid-opacity;
    }

    .gauge-liquid-text {
        fill: @color;
    }
}


// old

// classes 2 extend
.rect-auto {
    clip: rect(auto, auto, auto, auto);
}

.pie {
    position: absolute;
    border: @circle-width solid @primary-color;
    width: 1 - (2 * @circle-width);
    height: 1 - (2 * @circle-width);
    clip: rect(0em, 0.5em, 1em, 0em);
    border-radius: 50%;
    .rotate(0deg);
}

.pie-fill {
    .rotate(180deg);
}

// main
.score-gauge.c100 {
    *, *:before, *:after {
        .box-sizing(content-box);
    }

    position: relative;
    width: 1em;
    height: 1em;
    font-size: 120px;
    border-radius: 50%;
    display: inline-block;
    background-color: @secondary-color;

    &.sm {
        font-size: 50px; // same as path
        min-width: 50px; // same as path
    }

    // centered value inside circle
    > span {
        position: absolute;
        width: 100%;
        z-index: 1;
        left: 0;
        top: 0;
        line-height: 5em;
        font-size: 0.2em;
        color: @primary-color;
        display: block;
        text-align: center;
        white-space: nowrap;
        .transition-property(all);
        .transition-duration(0.2s);
        .transition-timing-function(ease-out);
    }

    // background inside the circle
    &:after{
        position: absolute;
        top: @circle-width;
        left: @circle-width;
        display: block;
        content: " ";
        border-radius: 50%;
        background-color: @bg-color;
        width: 1 - (2 * @circle-width);
        height: 1 - (2 * @circle-width);
        .transition-property(all);
        .transition-duration(0.2s);
        .transition-timing-function(ease-in);
    }

    // the slice (mask)
    .slice {
        position: absolute;
        width: 1em;
        height: 1em;
        clip: rect(0em, 1em, 1em, 0.5em);
    }

    // circle to show the status
    .bar {
        &:extend(.pie);
    }

    // hide "0%" when gauge is empty
    &.p0 {
        > span {
            visibility: hidden;
        }
    }

    // loop to create all needed elements automatically
    .generate-elements(@n, @i: 1) when (@i =< @n) {
        &.p@{i} {
            & .slice {
                &:extend(.rect-auto);
            }
            & .bar:after{
                &:extend(.pie-fill);
            }
            & .fill{
                &:extend(.pie);
                &:extend(.pie-fill);
            }
        }
        .generate-elements(@n, (@i + 1));
    }
    // loop to rotate all 100 circles
    .generate-rotation(@n, @i: 1) when (@i =< @n) {
        &.p@{i} .bar {
            @degs: (360/100*@i);
            .rotate(~"@{degs}deg");
        }
        .generate-rotation(@n, (@i + 1));
    }

    .generate-elements(100, 51);
    .generate-rotation(100, 1);

    // hover styles
    &:hover{
        cursor: default;

        > span {
            width: 3.33em;
            line-height: 3.33em;
            font-size: 0.3em;
            color: @primary-color;
        }

        &:after{
            top: @circle-width-hover;
            left: @circle-width-hover;
            width: 1 - (2 * @circle-width-hover);
            height: 1 - (2 * @circle-width-hover);
        }
    }
}
