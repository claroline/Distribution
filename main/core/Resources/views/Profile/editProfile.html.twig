{% extends editYourself == true ? "ClarolineCoreBundle:Desktop:layout.html.twig": "ClarolineCoreBundle:Administration:layout.html.twig" %}

{% block title %}
    {{ 'profil_edition'|trans({}, 'platform') }}
{% endblock %}

{% block content %}
    <div class="panel panel-default">
        {% if editYourself %}
            <div class="panel-heading">
                <h3 class="panel-title">{{ 'profil_edition'|trans({}, 'platform') }}</h3>
            </div>
        {% endif %}
        <div class="panel panel-body">
           {{
                macros.breadcrumbs([
                    {
                        'name': 'users_management'|trans({}, 'platform'),
                        'href': path('claro_admin_users_index')
                    },
                    {
                        'name':'profile_edition'|trans({}, 'platform'),
                        'href':''
                    }
                ])
            }}
        </div>
        {% if not user.isMailValidated() and is_mailer_available() and editYourself %}
            <div class="alert alert-warning">
                {{ 'email_not_activated_part_1'|trans({'%email%': app.user.mail}, 'platform') }}
                <a href="{{ path('claro_security_validate_email_send', {'hash': app.user.emailValidationHash}) }}" class="confirm-email"> {{ 'email_not_activated_part_2'|trans({}, 'platform') }}</a>
                {{ 'email_not_activated_part_3'|trans({}, 'platform') }}.
            </div>
        {% endif %}
        {% set actionForm = editYourself ? path('claro_user_profile_edit') : path('claro_user_profile_edit', {'user': user.getId()}) %}
        {% set cancelUrl  = editYourself ? path('claro_public_profile_view', {'publicUrl': user.publicUrl}) : path('claro_admin_users_index') %}
        <form role="form" class="form-horizontal" action="{{ actionForm }}" method="post" {{ form_enctype(form) }} id="profile_form">
            <div class="panel-body">
                {% for role in unavailableRoles %}
                    <div class="alert alert-warning"> {{ 'role_limit_reached'|trans({'%translationKey%': role.getTranslationKey()|trans({}, 'platform')}, 'platform') }}</div>
                {% endfor %}
                {{ form_widget(form) }}
            </div>
            <div class="panel-footer">
                <button type="submit" class="btn btn-primary">{{ 'edit'|trans({}, 'platform') }}</button>
                <a href="{{ cancelUrl }}" class="btn btn-default" role="button">{{ 'cancel' | trans({}, 'platform') }}</a>
                <a href="{{path('claro_user_password_edit', {'user': user.getId()})}}"  class="btn btn-default" role="button">
                    {{'edit_password'|trans({}, 'platform')}}
                </a>
            </div>
        </form>
    </div>
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script>
        //disable unavailable checkboxes
        {% for role in unavailableRoles %}
            $('#profile_form_platformRoles_' + {{ role.getId() }}).attr('disabled', true)
        {% endfor %}

        //registers ids of checked organizations and updates groups choices accordingly
        let groupsData = {}
        let organizationsIds = []
        let displayedGroupsIds = []

        $('#profile_form_organizations').on('change', function () {
          updateOrganizations()
          generateGroupsIds()
          updateGroups()
        })

        const updateOrganizations = function () {
          const checkedOrganizations = $('input[name="profile_form[organizations][]"]:checked')
          organizationsIds = []

          for (let i = 0; i < checkedOrganizations.length; ++i) {
            organizationsIds.push(parseInt(checkedOrganizations[i].value))
          }
        }

        const generateGroupsIds = function () {
          displayedGroupsIds = []
          organizationsIds.forEach(o => {
            if (groupsData[o]) {
              groupsData[o].forEach(groupId => {
                if (displayedGroupsIds.findIndex(dg => dg === groupId) === -1) {
                  displayedGroupsIds.push(groupId)
                }
              })
            }
          })
        }

        const updateGroups = function () {
          const groupsInputs = $('input[name="profile_form[groups][]"]');

          for (let i = 0; i < groupsInputs.length; ++i) {
            if (displayedGroupsIds.findIndex(groupId => groupId === parseInt(groupsInputs[i].value)) > -1) {
              $(`#${groupsInputs[i].id}`).parent().show('slow')
            } else {
              $(`#${groupsInputs[i].id}`).prop('checked', false)
              $(`#${groupsInputs[i].id}`).parent().hide('slow')
            }
          }
          if (displayedGroupsIds.length === 0) {
            $('#profile_form_groups').parent().parent().hide('slow')
          } else {
            $('#profile_form_groups').parent().parent().show('slow')
          }
        }

        $(document).ready(function () {
          {% for orgaId, groupsIds in groupsData %}
            groupsData[{{ orgaId }}] = []

            {% for groupId in groupsIds %}
              groupsData[{{ orgaId }}].push({{ groupId }})
            {% endfor %}
          {% endfor %}
          updateOrganizations()
          generateGroupsIds()
          updateGroups()
        })
    </script>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}

    <link rel="stylesheet" href="{{ asset('vendor/angular/angular-ui.css')}}"> </link>

{% endblock %}
