{% extends 'ClarolineCoreBundle::layout.html.twig' %}

{# Checks if we need to hide the breadcrumb #}
{% if workspace is defined and
    workspace is not null and
    workspace.getOptions() is not empty and
    workspace.getOptions().getDetails() is not empty and
    workspace.getOptions().getDetails()['hide_breadcrumb'] is defined and
    workspace.getOptions().getDetails()['hide_breadcrumb']
%}
    {% set hideBreadcrumb = true %}
{% endif %}

{% block claroline_danger %}
    {{ parent() }}

    {% if workspace is defined and not is_date_access_valid(workspace) %}
        <div class="label label-danger">
            {{ 'workspace_access_date_invalid'|trans({}, 'platform') }}
        </div>
    {% endif %}
{% endblock %}

{% block title %}
    {{ workspace.name }}
{% endblock %}

{% block breadcrumb %}
    {% if breadcrumb is defined %}
        {{ breadcrumb }}
    {% endif %}
{% endblock %}

{% block leftbar %}
    {% if workspace is defined and workspace != null and is_granted('OPEN', workspace) %}
        {{ render(controller("ClarolineCoreBundle:Workspace:renderToolbar", {workspace: workspace, request: app.request})) }}
    {% endif %}
{% endblock %}

{% block content %}
    {# @deprecated block : will be removed ASAP #}
    {% block section_panel %}
        <div class="panel panel-default">
            {# @deprecated block : will be removed ASAP #}
            {% block section_content %}{% endblock %}
        </div>
    {% endblock %}
{% endblock %}

{% block javascripts %}
    {{ parent() }}

    {# Workspace toolbar #}
    <script src="{{ hotAsset('claroline-distribution-main-core-workspace-toolbar') }}"></script>

    <script type="text/javascript">
        window.Workspace = {};
        {% if node is defined and node.getWorkspace() is not null %}
            window.Workspace.id = {{ node.getWorkspace().getId() }};
        {% else %}
            window.Workspace.id = null;
        {% endif %}
    </script>

    {# all of the next code is deprecated #}
    <script>
        $(document).ready(function () {
            if (window.self !== window.top) {
                // I'm an IFrame
                var currentHeight = 0;
                var element = document.getElementById('wrap');

                function getHeight() {
                    return Math.max(
                        document.body.scrollHeight,
                        document.body.offsetHeight
                    );
                }

                function postHeight(height) {
                    if (parent && height !== currentHeight) {
                        currentHeight = height;
                        parent.postMessage('documentHeight:'+height, "*");
                    }
                }

                // post height
                postHeight(getHeight());

                // attach mutation observer
                // we also listen to image loading to resize after load
                new MutationObserver(function (mutations) {
                    mutations.forEach(function (mutation) {
                        if ('childList' === mutation.type) {
                            var children = mutation.target.getElementsByTagName('img')
                            for (var i = 0; i < children.length; i++) {
                                var child = children[i]
                                child.addEventListener('load', function() {
                                    postHeight(getHeight());
                                })
                            }
                        }
                    });

                    postHeight(getHeight());
                }).observe(element, {
                    attributes: true,
                    childList: true,
                    characterData: true,
                    subtree: true
                })
            }
        });
    </script>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}

    {% if workspace is defined and workspace is not null and workspace.backgroundColor is not null %}
    <style type="text/css">
        body {
            background-color: {{ workspace.getOptions().getDetails()['background_color'] }};
        }
    </style>
    {% endif %}
{% endblock %}
