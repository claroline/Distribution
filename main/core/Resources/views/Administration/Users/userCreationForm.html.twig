{% extends "ClarolineCoreBundle:Administration:layout.html.twig" %}

{% block title %}{{ parent() ~ ' - ' ~ 'add_user' | trans({}, 'platform') | striptags | raw }}{% endblock %}
{% block section_content %}
    <form role="form" class="form-horizontal" action="{{ path('claro_admin_create_user') }}" method="post" {{ form_enctype(form_complete_user) }} id="form_complete_user" autocomplete="off">
        <div class="panel-body">
            {{
                macros.breadcrumbs([
                    {
                        'name': 'users_management'|trans({}, 'platform'),
                        'href': path('claro_admin_users_index')
                    },
                    {
                        'name': 'add_user'|trans({}, 'platform'),
                        'href':''
                    }
                ])
            }}
            <div>{{ macros.flashBox() }}</div>
            {% if error is not empty %}
                <div class="alert alert-warning"> {{ error|trans({}, 'platform') }} </div>
            {% endif %}
            {% for role in unavailableRoles %}
                {% if role.getName() == 'ROLE_USER' %}
                    <div class="alert alert-danger"> {{ 'user_limit_reached'|trans({}, 'platform') }}</div>
                {% else %}
                    <div class="alert alert-warning"> {{ 'role_limit_reached'|trans({'%translationKey%': role.getTranslationKey()|trans({}, 'platform')}, 'platform') }}</div>
                {% endif %}
            {% endfor %}
            {{ form_widget(form_complete_user) }}
        </div>
        <div class="panel-footer">
            <button type="submit" class="btn btn-primary">{{ 'ok'|trans({}, 'platform') }}</button>
            <a class="btn btn-default" href="{{ path('claro_admin_users_index') }}" role="button">
                {{ 'cancel'|trans({}, 'platform') }}
            </a>
        </div>
    </form>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        //disable unavailable checkboxes
        {% for role in unavailableRoles %}
            $('#profile_form_creation_platformRoles_' + {{ role.getId() }}).attr('disabled', true);
        {% endfor %}

        //registers ids of checked organizations and updates groups choices accordingly
        let groupsData = {}
        let organizationsIds = []
        let displayedGroupsIds = []

        $('#profile_form_creation_organizations').on('change', function () {
          updateOrganizations()
          generateGroupsIds()
          updateGroups()
        })

        const updateOrganizations = function () {
          const checkedOrganizations = $('input[name="profile_form_creation[organizations][]"]:checked')
          organizationsIds = []

          for (let i = 0; i < checkedOrganizations.length; ++i) {
            organizationsIds.push(parseInt(checkedOrganizations[i].value))
          }
        }

        const generateGroupsIds = function () {
          displayedGroupsIds = []
          organizationsIds.forEach(o => {
            if (groupsData[o]) {
              groupsData[o].forEach(groupId => {
                if (displayedGroupsIds.findIndex(dg => dg === groupId) === -1) {
                  displayedGroupsIds.push(groupId)
                }
              })
            }
          })
        }

        const updateGroups = function () {
          const groupsInputs = $('input[name="profile_form_creation[groups][]"]');

          for (let i = 0; i < groupsInputs.length; ++i) {
            if (displayedGroupsIds.findIndex(groupId => groupId === parseInt(groupsInputs[i].value)) > -1) {
              $(`#${groupsInputs[i].id}`).parent().show('slow')
            } else {
              $(`#${groupsInputs[i].id}`).prop('checked', false)
              $(`#${groupsInputs[i].id}`).parent().hide('slow')
            }
          }
          if (displayedGroupsIds.length === 0) {
            $('#profile_form_creation_groups').parent().parent().hide('slow')
          } else {
            $('#profile_form_creation_groups').parent().parent().show('slow')
          }
        }

        $(document).ready(function () {
          {% for orgaId, groupsIds in groupsData %}
            groupsData[{{ orgaId }}] = []

            {% for groupId in groupsIds %}
              groupsData[{{ orgaId }}].push({{ groupId }})
            {% endfor %}
          {% endfor %}
          updateOrganizations()
          generateGroupsIds()
          updateGroups()
        })
    </script>
{% endblock %}
